enum PosterSize {
    w92 = "w92"
    w154 = "w154"
    w185 = "w185"
    w342 = "w342"
    w500 = "w500"
    w780 = "w780"
    original = "original"
}

enum ProfileSize {
    w45 = "w45"
    w185 = "w185"
    w300 = "w300"
    h632 = "h632"
    original = "original"
}

enum StillSize {
    w92 = "w92"
    w185 = "w185"
    w300 = "w300"
    h632 = "h632"
    original = "original"
}

enum BackdropSize {
    w300 = "w300"
    w780 = "w780"
    w1280 = "w1280"
    original = "original"
}

struct ImageConfigurationData {
    base_url: String
    secure_base_url: String
    poster_sizes: []PosterSize
    profile_sizes: []ProfileSize
    still_sizes: []StillSize
    backdrop_sizes: []BackdropSize
}

struct ConfigurationData {
    images: ImageConfigurationData
    change_keys: []String
}

struct CastEntry {
    character: String
    credit_id: String
    id: U32
    name: String
    order: U32
    profile_path: ?String
}

struct CrewEntry {
    credit_id: String
    department: String
    id: U32
    name: String
    job: String
    profile_path: ?String
}

struct Credits {
    id: ?U32
    cast: ?[]CastEntry
    crew: ?[]CrewEntry
}

struct MovieData {
    poster_path: ?String
    id: U32
    imdb_id: String
    title: ?String
    vote_average: F32
    release_date: ?String
    overview: String
    credits: Credits
}

struct Episode {
    air_date: String
    id: U32
    name: String
    overview: String
    season_number: U32
    episode_number: U32
    still_path: ?String
    vote_average: F32
    vote_count: U32
}

struct ExternalIds {
    imdb_id: ?String
    freebase_mid: ?String
    freebase_id: ?String
    tvdb_id: ?U32
    tvrage_id: ?U32
}

struct Season {
    air_date: ?String
    episode_count: U32
    season_number: U32
    id: U64
    name: String
    overview: String
}

struct Show {
    poster_path: ?String
    id: U32
    external_ids: ExternalIds
    name: String
    vote_average: F32
    first_air_date: ?String
    overview: String
    credits: Credits
    last_episode_to_air: ?Episode
    seasons: []Season
}

struct Person {
    popularity: F32
    name: String
    id: U32
    profile_path: ?String
    known_for_department: String
    imdb_id: String
}

struct MovieCandidate {
    poster_path: ?String
    id: U32
    title: ?String
    vote_average: F32
    release_date: ?String
    overview: String
}

struct ShowCandidate {
    poster_path: ?String
    id: U32
    name: String
    vote_average: F32
    first_air_date: ?String
    overview: String
}

struct KnownForMovieData {
    poster_path: ?String
    id: U32
    title: ?String
    vote_average: F32
    release_date: ?String
    overview: String
}

struct KnownForShowData {
    poster_path: ?String
    id: U32
    vote_average: F32
    overview: String
    first_air_date: ?String
    name: ?String
}

union(tag = media_type, embedded) KnownFor {
    movie: KnownForMovieData
    tv: KnownForShowData
}

struct PersonCandidate {
    popularity: F32
    name: String
    id: U32
    profile_path: ?String
    known_for: []KnownFor
    known_for_department: String
}

struct PersonSearchResult {
    page: U32
    total_results: U32
    results: []PersonCandidate
}

struct MovieSearchResult {
    page: U32
    total_results: U32
    results: []MovieCandidate
}

struct ShowSearchResult {
    page: U32
    total_results: U32
    results: []ShowCandidate
}
